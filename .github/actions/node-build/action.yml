name: "Build & Publish"
inputs:
  PERSONAL_ACCESS_TOKEN:
    description: "Github personal access token"
    required: true
  build_script:
    description: "Build script to be executed"
    default: 'npm run build'

outputs:
  appFiles:
    description: "Space seperated Application files"
    value: ${{ steps.create-release-files.outputs.appFiles }}
  appFilesArray:
    description: "Application files in JSON array format"
    value: ${{ steps.create-release-files.outputs.appFilesArray }}
  libFiles:
    description: "Space seperated Library files"
    value: ${{ steps.create-release-files.outputs.libFiles }}
  libFilesArray:
    description: "Library files in JSON array format"
    value: ${{ steps.create-release-files.outputs.libFilesArray }}

runs:
  using: "composite"
  steps:
    - name: Scan Environment
      id: environment
      uses: kimvar-inc/manifests/.github/actions/detect-environment@main
      with:
        PERSONAL_ACCESS_TOKEN: ${{ inputs.PERSONAL_ACCESS_TOKEN }}

    - name: Build
      shell: bash
      run: |
        ${{ inputs.build_script }}
        mkdir -p __publish
        mkdir -p __publish/build        
        mkdir -p __publish/packages
        mkdir -p __publish/releases

    - name: Move Build Directories
      if: ${{ steps.environment.outputs.projectDirs != '' }}
      shell: bash
      run: |
        PROJECT_DIRS="${{steps.environment.outputs.projectDirs }}"
        for dir in $PROJECT_DIRS; do
          if [ -d "$dir" ]; then            
            # Extract the project name without namespace
            PROJECT_NAME=$(jq -r '.name' "$dir/package.json" | awk -F '/' '{print $NF}')        
            if [ ! -z "$PROJECT_NAME" ]; then
              if [ -d "$dir/dist" ]; then
                SRC_DIR="dist"
              elif [ -d "$dir/build" ]; then
                SRC_DIR="build"
              else
                echo -e "\033[1;33mNo ./dist or ./build directory found. Skipping project '$PROJECT_NAME'\033[0m"
                continue
              fi               
              # Copy build
              echo -e "\033[1;33mMoving $dir/$SRC_DIR to /__publish/build/$PROJECT_NAME\033[0m"              
              mv "$dir/$SRC_DIR" "__publish/build/$PROJECT_NAME"
              # Copy package.json
              mkdir -p __publish/packages/$PROJECT_NAME
              cp "$dir/package.json" "__publish/packages/$PROJECT_NAME/package.json"
            fi
          fi
        done

    - name: Create release files
      if: ${{ steps.environment.outputs.projectDirs != '' }}
      id: create-release-files
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.PERSONAL_ACCESS_TOKEN }}
      run: |
        PROJECT_DIRS="${{steps.environment.outputs.projectDirs}}"      
        APP_FILES="";
        LIB_FILES="";
        LATEST_RELEASE_SHA=${{steps.environment.outputs.releasedSha }}
        # Verify if SHA exists in history
          if ! git rev-parse --quiet --verify "$LATEST_RELEASE_SHA" >/dev/null; then
          echo "Warning: Latest release SHA not found in local history, using first commit."
          LATEST_RELEASE_SHA=$(git rev-list --max-parents=0 HEAD)
        fi
    
        for dir in $PROJECT_DIRS; do
          if [ -d "$dir" ]; then            
        
            # Extract the project name from package.json without namespace
            PROJECT_NAME=$(jq -r '.name' "$dir/package.json" | awk -F '/' '{print $NF}')
        
            # Extract project version from package.json
            PROJECT_VERSION=$(jq -r '.version' "$dir/package.json")
        
            if [ ! -z "$PROJECT_NAME" ]; then                            
              # Zip build artifacts
              ZIP_BASE_NAME="$PROJECT_NAME-$PROJECT_VERSION"
              if [ -f "$dir/Dockerfile" ]; then
                APP_FILES="$APP_FILES $ZIP_BASE_NAME"
              else
                LIB_FILES="$LIB_FILES $ZIP_BASE_NAME"
              fi
              cd "__publish/build/$PROJECT_NAME" && zip -r "../../releases/$ZIP_BASE_NAME.zip" . && cd -
        
              # Generate release notes      
              echo -e "Generating Release Notes for \033[1;33m$PROJECT_NAME\033[0m"      
                  
              COMMITS=$(git log --pretty=format:"%s (%h)" "$LATEST_RELEASE_SHA"..HEAD -- "$dir")
              # Filter out commits
              RELEASE_NOTES=$(echo "$COMMITS" | grep -E '^(feat:|fix:|docs:|refactor:|perf:|test)' || true)
        
              if [ -z "$RELEASE_NOTES" ]; then
                RELEASE_NOTES="No significant changes since last release."
              fi
        
              echo "Release Notes:"
              MODIFIED_STRING=$(echo -e "$RELEASE_NOTES" | sed ':a;N;$!ba;s/\n/\n    /g')
              echo -e "\033[1;33m$MODIFIED_STRING\033[0m"
        
              # Save release notes to a file    
              echo "$RELEASE_NOTES" > "__publish/releases/$ZIP_BASE_NAME.txt"    
        
            fi
          fi
          # Trim leading spaces
          APP_FILES=$(echo "$APP_FILES" | xargs)
          LIB_FILES=$(echo "$LIB_FILES" | xargs)        
        done
        APP_FILES_ARRAY=$(echo "$APP_FILES" | tr -s ' ' '\n' | jq -R -s 'split("\n") | map(select(. != ""))')
        LIB_FILES_ARRAY=$(echo "$LIB_FILES" | tr -s ' ' '\n' | jq -R -s 'split("\n") | map(select(. != ""))')        
        echo appFiles="$APP_FILES" >> $GITHUB_OUTPUT
        echo appFilesArray=$APP_FILES_ARRAY >> $GITHUB_OUTPUT
        echo appFilesArray="$APP_FILES_ARRAY"
        echo libFiles="$LIB_FILES" >> $GITHUB_OUTPUT                
        echo libFilesArray=$LIB_FILES_ARRAY >> $GITHUB_OUTPUT        
        echo libFilesArray="$LIB_FILES_ARRAY"

    - name: Prepare workspace files
      shell: bash
      run: |
        cd __publish
        
        # Create .rman.yml
        cat <<EOF > .rman.yml
        command:
          publish:
            contents: ./
        logLevel: info
        EOF
        
        # Create package.json
        cat <<EOF > package.json
        {
          "workspaces": [
            "build/*"
          ]
        }
        EOF
        
        cd ..

    - name: "Monorepo: Upload Artifacts"
      uses: actions/upload-artifact@v4
      with:
        name: 'release-artifacts'
        path: __publish/releases/*


    - name: Publish packages
      shell: bash
      run: |
        cd __publish
        NPMRC_FILE="$GITHUB_WORKSPACE/.npmrc"
        rman publish --userconfig="$NPMRC_FILE" --log-level=verbose
